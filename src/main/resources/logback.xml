<?xml version="1.0" encoding="UTF-8"?>
<!--scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--规定输出到控制台的格式，级别和编码方式等配置，未设置具体打印什么项目，什么模块-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoding>UTF-8</encoding>
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%p][%c{40}][%t] %m%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!--规定输出到文件的格式，级别和存储形式等配置，未设置具体打印什么项目，什么模块-->
    <appender name="mmall" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
        <File>F:\java\SSM电商项目\logs\mmall\mmall.log</File>
        <!--TimeBasedRollingPolicy根据时间来制定滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>F:\java\SSM电商项目\logs\mmall.log.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <!--<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。-->
            <append>true</append>
            <!--10天删除旧文件-->
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%p][%c{40}][%t] %m%n</pattern>
        </encoder>
    </appender>

    <!--规定输出到文件的格式，error级别和存储形式等配置，未设置具体打印什么项目，什么模块-->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<File>d:/mmalllog/error.log</File>-->
        <File>F:\java\SSM电商项目\logs\mmall\error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>F:\java\SSM电商项目\logs\mmall\error.log.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <!--<fileNamePattern>d:/mmalllog/error.log.%d{yyyy-MM-dd}.gz</fileNamePattern>-->
            <append>true</append>
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%p][%c{40}][%t] %m%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--是ERROR就ACCEPT,否则就DENY，不会打引比ERROR高的日志-->
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

<!--<root>:所有logger的父节点
    level:只打印debug级别以上的动作
    <appender-ref>：只通过console和error形式打印-->
    <!--全局的日志只输出到控制台，把error输出到指定日志里-->
    <root level="DEBUG">
        <appender-ref ref="console"/>
        <appender-ref ref="error"/>
    </root>

<!-- <loger>：设置哪一个包或者类需要打印
         <appender-ref>：设置是文件输出打印，还是控制台打印，还是error级别的文件输出打印，没有appender-ref
         name：哪一个包或者类需要打印；
         addtivity: 默认是true，表示继承上一级appender和level，这里是false，只会以配置的appender的形式输出日志-->
    <!--com.mmall包只输出level级别的日志，并且父级root的logger不管这个包-->
    <logger name="com.mmall"  level="INFO" additivity="false" >
        <appender-ref ref="mmall"/>
        <appender-ref ref="console"/>
        <appender-ref ref="error"/>
    </logger>

    <!--mybatis log 日志-->
    <!--com.mmall.dao里debug级别的日志可以输出，输出形式就是父级logger的形式-->
    <logger name="com.mmall.dao" level="DEBUG"/>


    <!--<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" >-->
    <!--<appender-ref ref="console"/>-->
    <!--</logger>-->

    <!--<logger name="java.sql.Connection" level="DEBUG">-->
    <!--<appender-ref ref="console"/>-->
    <!--</logger>-->
    <!--<logger name="java.sql.Statement" level="DEBUG">-->
    <!--<appender-ref ref="console"/>-->
    <!--</logger>-->

    <!--<logger name="java.sql.PreparedStatement" level="DEBUG">-->
    <!--<appender-ref ref="console"/>-->
    <!--</logger>-->


</configuration>